how to run the program : run the main function in the TestPerformance class.
SortedHeap:
   I have implemented this data structure using double linked list, and set. The linked list is saving the data in
     ascending order,and the set is saving the keys. the set target is to verify in o(1) that the key doesn't exist in the list.
   In order of saving the order of the list, the biggest value should be added to tail, since the value are ordered, it can be achived in o(1).
   insert - o(1),
   extract-minimum - just remove the head of the list(since this is the smallest value) o(1)
   union -  since every list is sorted, we can use the merge method that we learned in merge-sort, the complexity is o(n +m)
   minimum - get the head of the list o(1)


UnSortedHeap & DisjointHeap:
  I have implemented this data structure using double linked list, and set. The linked list is saving the data in
     ascending order,and the set is saving the keys. the set target is to verify in o(1) that the key doesn't exist in the list.
   In order of saving the order of the list, the biggest value should be added to tail,
   insert -In order to save the list ordered we should scan the linkedlist, in the base case the key is the smallest, and should be added as head, compleixty o(1)
   in the worst case the value should be added to tail, in that case the scan will take o(n)
   extract-minimum - just remove the head of the list(since this is the smallest value) o(1)
   union -  since every list is sorted, we can use the merge method that we learned in merge-sort, the complexity is o(n +m)
   minimum - get the head of the list o(1)

  The same code is used for both, since I'm using also set, for verify if the key already has been used, in o(1).

Test:
    In order to test it, I have created 3 files. first files - value with ascending order, second, files with descending order,
    and third randomize values. full code can be view in TestPerformance
    As expected the ascending file run the fastest, since the value has been inserted to the head each time.
    and the descending was slowest  by 8~ times!
    the randomize was only 3 times slower then the ascending.
    I used the commandsTime & commandstime to aggraget the exact ammount of time for each operation:
    As we can see the descending is return the worth result for each operation(minimum & extract is always zero since this operation is less the millisecond - o(1) complexity as explained above)

    file ascending.txt type SortedHeap time 55
    CommandsTime{makeHeap=CommandTime{count=2, time=2, average=1.0}, insert=CommandTime{count=200, time=3, average=0.015}, union=CommandTime{count=1, time=0, average=0.0}, extract=CommandTime{count=40, time=0, average=0.0}, minimum=CommandTime{count=20, time=0, average=0.0}}
    file randomize.txt type UnSortedHeap time 101
    CommandsTime{makeHeap=CommandTime{count=2, time=1, average=0.5}, insert=CommandTime{count=20000, time=16, average=8.0E-4}, union=CommandTime{count=1, time=2, average=2.0}, extract=CommandTime{count=40, time=0, average=0.0}, minimum=CommandTime{count=20, time=0, average=0.0}}
    file descending.txt type UnSortedHeap time 279
    CommandsTime{makeHeap=CommandTime{count=2, time=0, average=0.0}, insert=CommandTime{count=20000, time=5, average=2.5E-4}, union=CommandTime{count=1, time=221, average=221.0}, extract=CommandTime{count=40, time=0, average=0.0}, minimum=CommandTime{count=20, time=0, average=0.0}}
    file ascending.txt type UnSortedHeap time 39
    CommandsTime{makeHeap=CommandTime{count=2, time=2, average=1.0}, insert=CommandTime{count=200, time=3, average=0.015}, union=CommandTime{count=1, time=0, average=0.0}, extract=CommandTime{count=40, time=0, average=0.0}, minimum=CommandTime{count=20, time=0, average=0.0}}



